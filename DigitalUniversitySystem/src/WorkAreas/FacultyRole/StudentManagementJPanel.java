/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package WorkAreas.FacultyRole;

import Business.Business;
import Business.CourseSchedule.Assignment;
import Business.CourseSchedule.CourseOffer;
import Business.CourseSchedule.CourseSchedule;
import Business.CourseSchedule.SeatAssignment;
import Business.Department.Department;
import Business.Person.Person;
import Business.Profiles.FacultyProfile;
import Business.Profiles.StudentProfile;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author eric
 */
public class StudentManagementJPanel extends javax.swing.JPanel {

    private Business business;
    private FacultyProfile faculty;
    JPanel CardSequencePanel;
    private CourseOffer selectedCourse;
    private SeatAssignment selectedStudentSeat;
    
    /**
     * Creates new form StudentManagementJPanel
     */
    public StudentManagementJPanel(Business business, FacultyProfile faculty, JPanel panel) {
        
        this.business = business;
        this.faculty = faculty;
        this.CardSequencePanel = panel;
        
        initComponents();
        
        setDetailsDisabled();
        populateSemesters();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbSemester = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cmbCourse = new javax.swing.JComboBox<>();
        btnLoadStudents = new javax.swing.JButton();
        btnShowRanking = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudentList = new javax.swing.JTable();
        btnViewDetails = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtStudentID = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtStudentName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtCurrentGrade = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtAssignmentAvg = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAssignments = new javax.swing.JTable();
        btnGradeAssignment = new javax.swing.JButton();
        btnAutoCalculateGrade = new javax.swing.JButton();
        btnSaveFinalGrade = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel1.setText("Student Management");

        jLabel2.setText("Select Semester:");

        cmbSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbSemester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSemesterActionPerformed(evt);
            }
        });

        jLabel3.setText("Select Course:");

        cmbCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCourseActionPerformed(evt);
            }
        });

        btnLoadStudents.setText("Load Students");
        btnLoadStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadStudentsActionPerformed(evt);
            }
        });

        btnShowRanking.setText("Show Class Ranking");
        btnShowRanking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowRankingActionPerformed(evt);
            }
        });

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel4.setText("Enrolled Students");

        tblStudentList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Rank", "Student ID", "Name", "Avg Score", "Grade", "which GPA?"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblStudentList);

        btnViewDetails.setText("View Details");
        btnViewDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDetailsActionPerformed(evt);
            }
        });

        jLabel5.setText("Student Details");

        jLabel6.setText("Student ID:");

        txtStudentID.setEditable(false);

        jLabel7.setText("Name:");

        txtStudentName.setEditable(false);

        jLabel8.setText("Current Grade:");

        txtCurrentGrade.setEditable(false);

        jLabel9.setText("Assignment Avg:");

        txtAssignmentAvg.setEditable(false);

        jLabel10.setText("Assignments");

        tblAssignments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Assignment", "Max Score", "Score", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblAssignments);

        btnGradeAssignment.setText("Grade Assignment");
        btnGradeAssignment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGradeAssignmentActionPerformed(evt);
            }
        });

        btnAutoCalculateGrade.setText("Auto Calculate Grade");
        btnAutoCalculateGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutoCalculateGradeActionPerformed(evt);
            }
        });

        btnSaveFinalGrade.setText("Save Final Grade");
        btnSaveFinalGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveFinalGradeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(199, 199, 199)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnShowRanking)
                            .addComponent(jLabel1)))
                    .addComponent(btnLoadStudents)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(75, 75, 75)
                        .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(101, 101, 101)
                        .addComponent(jLabel3)
                        .addGap(62, 62, 62)
                        .addComponent(cmbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(410, 410, 410)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10))
                                .addGap(79, 79, 79)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtStudentID)
                                    .addComponent(txtStudentName)
                                    .addComponent(txtCurrentGrade)
                                    .addComponent(txtAssignmentAvg, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(btnViewDetails)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnGradeAssignment)
                        .addGap(18, 18, 18)
                        .addComponent(btnAutoCalculateGrade)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSaveFinalGrade))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(338, 338, 338))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnBack))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(cmbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoadStudents)
                    .addComponent(btnShowRanking))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(btnViewDetails))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtCurrentGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtAssignmentAvg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGradeAssignment)
                    .addComponent(btnAutoCalculateGrade)
                    .addComponent(btnSaveFinalGrade))
                .addContainerGap(267, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void setDetailsDisabled() {
        txtStudentID.setEnabled(false);
        txtStudentName.setEnabled(false);
        txtCurrentGrade.setEnabled(false);
        txtAssignmentAvg.setEnabled(false);
    }
    
    private void populateSemesters() {
        cmbSemester.removeAllItems();
        
        Department department = business.getDepartment();
        if (department == null) {
            JOptionPane.showMessageDialog(this, "Department not found!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        ArrayList<String> semesters = new ArrayList<>(department.mastercoursecatalog.keySet());
        
        if (semesters.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No semesters found!", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        for (String semester : semesters) {
            cmbSemester.addItem(semester);
        }
        
        if (cmbSemester.getItemCount() > 0) {
            cmbSemester.setSelectedIndex(0);
            populateCoursesForSemester();
        }
    }
    
    /**
     * Load courses for selected semester
     */
    private void populateCoursesForSemester() {
        cmbCourse.removeAllItems();
        
        String selectedSemester = (String) cmbSemester.getSelectedItem();
        if (selectedSemester == null) return;
        
        Department department = business.getDepartment();
        CourseSchedule schedule = department.getCourseSchedule(selectedSemester);
        
        if (schedule == null) return;
        
        // Get courses taught by this faculty
        for (CourseOffer co : schedule.getCourseOffers()) {
            FacultyProfile fp = co.getFacultyProfile();
            if (fp != null && fp.equals(faculty)) {
                cmbCourse.addItem(co.getCourseNumber());
            }
        }
    }
    
    /**
     * Load students for selected course
     */
    private void loadStudents() {
        String selectedSemester = (String) cmbSemester.getSelectedItem();
        String selectedCourseText = (String) cmbCourse.getSelectedItem();
        
        if (selectedSemester == null || selectedCourseText == null) {
            JOptionPane.showMessageDialog(this, "Please select semester and course!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Extract course number from combo box text
        String courseNumber = selectedCourseText;
        
        Department department = business.getDepartment();
        CourseSchedule schedule = department.getCourseSchedule(selectedSemester);
        selectedCourse = schedule.getCourseOfferByNumber(courseNumber);
        
        if (selectedCourse == null) {
            JOptionPane.showMessageDialog(this, "Course not found!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Get enrolled students
        ArrayList<SeatAssignment> enrolledStudents = selectedCourse.getEnrolledSeatAssignments();
        
        if (enrolledStudents.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No students enrolled in this course.", "Info", JOptionPane.INFORMATION_MESSAGE);
            clearStudentTable();
            return;
        }
        
        populateStudentTable(enrolledStudents);
        clearDetails();
    }
    
    /**
     * Populate student table
     */
    private void populateStudentTable(ArrayList<SeatAssignment> students) {
        DefaultTableModel model = (DefaultTableModel) tblStudentList.getModel();
        model.setRowCount(0);
        
        int rank = 1;
        for (SeatAssignment sa : students) {
            StudentProfile sp = sa.courseload.getStudent();
            if (sp == null) continue;
            
            Person person = sp.getPerson();
            String studentID = person.getPersonId();
            String studentName = person.getName();
            double avgScore = sa.getAssignmentAverageScore();
            String grade = sa.getLetterGrade() != null ? sa.getLetterGrade() : "N/A";
            // 如何计算该学生已有成绩的GPA？
            String gpa = "等待实现";
            
            Object[] row = {
                rank++,
                studentID,
                studentName,
                String.format("%.2f%%", avgScore),
                grade,
                gpa
            };
            
            model.addRow(row);
        }
    }
    
    /**
     * Clear student table
     */
    private void clearStudentTable() {
        DefaultTableModel model = (DefaultTableModel) tblStudentList.getModel();
        model.setRowCount(0);
    }
    
    /**
     * Clear student details
     */
    private void clearDetails() {
        txtStudentID.setText("");
        txtStudentName.setText("");
        txtCurrentGrade.setText("");
        txtAssignmentAvg.setText("");
        
        DefaultTableModel model = (DefaultTableModel) tblAssignments.getModel();
        model.setRowCount(0);
        
        selectedStudentSeat = null;
        tblStudentList.clearSelection();
    }
    
    /**
     * Show class ranking with statistics
     */
    private void showRanking() {
        if (selectedCourse == null) {
            JOptionPane.showMessageDialog(this, "Please load students first!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        ArrayList<SeatAssignment> rankedStudents = selectedCourse.getRankedStudents();
        double classAvgGPA = selectedCourse.getClassAverageGPA();
        
        if (rankedStudents.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No students to rank!", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        // Show ranking in table
        populateStudentTable(rankedStudents);
        
        // Show class GPA
        JOptionPane.showMessageDialog(this, 
            String.format("Class Statistics:\n\n" +
                         "Total Students: %d\n" +
                         "Class Average GPA: %.2f\n\n" +
                         "Students ranked by assignment average score.",
                         rankedStudents.size(),
                         classAvgGPA),
            "Class Ranking",
            JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * View selected student details
     */
    private void viewStudentDetails() {
        int selectedRow = tblStudentList.getSelectedRow();
        
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a student from the table!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String studentID = tblStudentList.getValueAt(selectedRow, 1).toString();
        
        // Find the SeatAssignment for this student
        ArrayList<SeatAssignment> enrolledStudents = selectedCourse.getEnrolledSeatAssignments();
        
        for (SeatAssignment sa : enrolledStudents) {
            StudentProfile sp = sa.courseload.getStudent();
            if (sp != null && sp.getPerson().getPersonId().equals(studentID)) {
                selectedStudentSeat = sa;
                displayStudentDetails(sa);
                return;
            }
        }
        
        JOptionPane.showMessageDialog(this, "Student details not found!", "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Display student details
     */
    private void displayStudentDetails(SeatAssignment sa) {
        StudentProfile sp = sa.courseload.getStudent();
        Person person = sp.getPerson();
        
        // Display basic info
        txtStudentID.setText(person.getPersonId());
        txtStudentName.setText(person.getName());
        txtCurrentGrade.setText(sa.getLetterGrade() != null ? sa.getLetterGrade() : "Not Graded");
        txtAssignmentAvg.setText(String.format("%.2f%%", sa.getAssignmentAverageScore()));
        
        // Display assignments
        populateAssignmentTable(sa.getAssignments());
    }
    
    /**
     * Populate assignment table
     */
    private void populateAssignmentTable(ArrayList<Assignment> assignments) {
        DefaultTableModel model = (DefaultTableModel) tblAssignments.getModel();
        model.setRowCount(0);
        
        for (Assignment a : assignments) {
            Object[] row = {
                a.getTitle(),
                a.getMaxScore(),
                a.getScore(),
                a.getStatus()
            };
            model.addRow(row);
        }
    }
    
    /**
     * Grade selected assignment
     */
    private void gradeAssignment() {
        if (selectedStudentSeat == null) {
            JOptionPane.showMessageDialog(this, "Please select a student first!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        int selectedRow = tblAssignments.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an assignment!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        Assignment assignment = selectedStudentSeat.getAssignments().get(selectedRow);
        
        String scoreStr = JOptionPane.showInputDialog(this, 
            "Enter score for: " + assignment.getTitle() + "\n" +
            "Max Score: " + assignment.getMaxScore(),
            "Grade Assignment",
            JOptionPane.QUESTION_MESSAGE);
        
        if (scoreStr == null || scoreStr.trim().isEmpty()) {
            return; // User cancelled
        }
        
        try {
            int score = Integer.parseInt(scoreStr);
            
            if (score < 0 || score > assignment.getMaxScore()) {
                JOptionPane.showMessageDialog(this, 
                    "Score must be between 0 and " + assignment.getMaxScore() + "!",
                    "Invalid Score",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            assignment.setScore(score);
            
            JOptionPane.showMessageDialog(this, "Assignment graded successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            
            // Refresh display
            displayStudentDetails(selectedStudentSeat);
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid number!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Auto calculate final grade from assignments
     */
    private void autoCalculateFinalGrade() {
        if (selectedStudentSeat == null) {
            JOptionPane.showMessageDialog(this, "Please select a student first!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (selectedStudentSeat.getAssignments().isEmpty()) {
            JOptionPane.showMessageDialog(this, "This student has no assignments yet!\n" + 
                    "Cannot auto-calculate grade without assignments.",
                    "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String calculatedGrade = selectedStudentSeat.calculateFinalGrade();
        
        
        double avgScore = selectedStudentSeat.getAssignmentAverageScore();
        
        int confirm = JOptionPane.showConfirmDialog(this, 
            String.format("Calculated Grade based on %.2f%% average:\n\n" +
                         "Final Grade: %s\n\n" +
                         "Do you want to apply this grade?",
                         avgScore, calculatedGrade),
            "Auto Calculate Grade",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);
        
        if (confirm == JOptionPane.YES_OPTION) {
            selectedStudentSeat.autoSetGradeFromAssignments();
            displayStudentDetails(selectedStudentSeat);
            
            // Refresh student table
            loadStudents();
            
            JOptionPane.showMessageDialog(this, "Final grade calculated and saved!", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    /**
     * Save final grade manually
     */
    private void saveFinalGrade() {
        if (selectedStudentSeat == null) {
            JOptionPane.showMessageDialog(this, "Please select a student first!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String[] gradeOptions = {"A", "A-", "B+", "B", "B-", "C+", "C", "C-", "F"};
        
        String grade = (String) JOptionPane.showInputDialog(this,
            "Select final grade for student:",
            "Save Final Grade",
            JOptionPane.QUESTION_MESSAGE,
            null,
            gradeOptions,
            selectedStudentSeat.getLetterGrade());
        
        if (grade != null) {
            selectedStudentSeat.setGrade(grade);
            displayStudentDetails(selectedStudentSeat);
            
            // Refresh student table
            loadStudents();
            
            JOptionPane.showMessageDialog(this, "Final grade saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).previous(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnLoadStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadStudentsActionPerformed
        // TODO add your handling code here:
        loadStudents();
    }//GEN-LAST:event_btnLoadStudentsActionPerformed

    private void btnShowRankingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowRankingActionPerformed
        // TODO add your handling code here:
        showRanking();
    }//GEN-LAST:event_btnShowRankingActionPerformed

    private void btnViewDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDetailsActionPerformed
        // TODO add your handling code here:
        viewStudentDetails();
    }//GEN-LAST:event_btnViewDetailsActionPerformed

    private void btnGradeAssignmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGradeAssignmentActionPerformed
        // TODO add your handling code here:
        gradeAssignment();
    }//GEN-LAST:event_btnGradeAssignmentActionPerformed

    private void btnAutoCalculateGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutoCalculateGradeActionPerformed
        // TODO add your handling code here:
        autoCalculateFinalGrade();
    }//GEN-LAST:event_btnAutoCalculateGradeActionPerformed

    private void btnSaveFinalGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveFinalGradeActionPerformed
        // TODO add your handling code here:
        saveFinalGrade();
    }//GEN-LAST:event_btnSaveFinalGradeActionPerformed

    private void cmbSemesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSemesterActionPerformed
        // TODO add your handling code here:
        populateCoursesForSemester();
    }//GEN-LAST:event_cmbSemesterActionPerformed

    private void cmbCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCourseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbCourseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAutoCalculateGrade;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnGradeAssignment;
    private javax.swing.JButton btnLoadStudents;
    private javax.swing.JButton btnSaveFinalGrade;
    private javax.swing.JButton btnShowRanking;
    private javax.swing.JButton btnViewDetails;
    private javax.swing.JComboBox<String> cmbCourse;
    private javax.swing.JComboBox<String> cmbSemester;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblAssignments;
    private javax.swing.JTable tblStudentList;
    private javax.swing.JTextField txtAssignmentAvg;
    private javax.swing.JTextField txtCurrentGrade;
    private javax.swing.JTextField txtStudentID;
    private javax.swing.JTextField txtStudentName;
    // End of variables declaration//GEN-END:variables
}
