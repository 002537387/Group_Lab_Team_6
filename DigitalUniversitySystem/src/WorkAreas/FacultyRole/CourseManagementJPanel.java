/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package WorkAreas.FacultyRole;

import Business.Business;
import Business.CourseCatalog.Course;
import Business.CourseSchedule.CourseOffer;
import Business.CourseSchedule.CourseSchedule;
import Business.Department.Department;
import Business.Profiles.FacultyProfile;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author eric
 */
public class CourseManagementJPanel extends javax.swing.JPanel {

    private Business business;
    private FacultyProfile faculty;
    private CourseOffer selectedCourseOffer;
    JPanel CardSequencePanel;
    
    /**
     * Creates new form CourseManagementJPanel
     */
    public CourseManagementJPanel(Business business, FacultyProfile faculty, JPanel panel) {
        
        this.business = business;
        this.faculty = faculty;
        this.CardSequencePanel = panel;
        
        initComponents();
        
        setDetailsDisabled();
        populateSemesters();
        populateEnrollmentStatus();
        clearTable();
        loadCourseList();
        clearDetails();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbSemester = new javax.swing.JComboBox<>();
        btnRefresh = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCourseList = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtCourseNumber = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtCourseName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtCourseDescription = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtCourseSchedule = new javax.swing.JTextField();
        spinnerCapacity = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtCurrentCapacity = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtSyllabus = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtEnrolled = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtAvailable = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        cmbEnrollmentStatus = new javax.swing.JComboBox<>();
        btnViewDetails = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel1.setText("Course Management");

        jLabel2.setText("Select Semester:");

        cmbSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbSemester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSemesterActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        tblCourseList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Course Number", "Course Name", "Credits", "Seats"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCourseList);

        jLabel3.setText("Course Details");

        jLabel4.setText("Course Number");

        txtCourseNumber.setEditable(false);

        jLabel5.setText("Course Name");

        txtCourseName.setEditable(false);

        jLabel6.setText("Course Description");

        jLabel7.setText("Course Schedule");

        jLabel8.setText("New Capacity");

        jLabel9.setText("Current Capacity");

        txtCurrentCapacity.setEditable(false);

        jLabel10.setText("Syllabus");

        jLabel11.setText("Enrolled Student");

        txtEnrolled.setEditable(false);

        jLabel12.setText("Available Seats");

        txtAvailable.setEditable(false);

        btnUpdate.setText("Update Course Details");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jLabel13.setText("Course Enrollment Status");

        btnClear.setText("Clear Selection");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        cmbEnrollmentStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnViewDetails.setText("View Details");
        btnViewDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDetailsActionPerformed(evt);
            }
        });

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 732, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel4))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtCourseNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel11)
                                            .addComponent(jLabel12)
                                            .addComponent(jLabel13))
                                        .addGap(99, 99, 99)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtCourseDescription)
                                            .addComponent(txtCourseSchedule)
                                            .addComponent(txtCurrentCapacity)
                                            .addComponent(txtEnrolled)
                                            .addComponent(txtAvailable, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                                            .addComponent(cmbEnrollmentStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(spinnerCapacity))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(54, 54, 54)
                                        .addComponent(txtSyllabus, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel10)
                                                .addGap(113, 113, 113))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(btnBack)
                                                .addGap(106, 106, 106))))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(335, 335, 335)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(171, 171, 171)
                        .addComponent(jLabel2)
                        .addGap(48, 48, 48)
                        .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(145, 145, 145)
                        .addComponent(btnRefresh)
                        .addGap(72, 72, 72)
                        .addComponent(btnViewDetails))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(btnUpdate)
                        .addGap(104, 104, 104)
                        .addComponent(btnClear)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefresh)
                    .addComponent(btnViewDetails))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtCourseNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtCourseDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(txtCourseSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtCurrentCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spinnerCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSyllabus, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(txtEnrolled, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel12)
                    .addComponent(txtAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(cmbEnrollmentStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(btnBack)))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnClear))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Disable detail fields
     */
    private void setDetailsDisabled() {
        txtCourseNumber.setEnabled(false);
        txtCourseName.setEnabled(false);
        txtCurrentCapacity.setEnabled(false);
        txtEnrolled.setEnabled(false);
        txtAvailable.setEnabled(false);
    }
    
    // Populate semester dropdown with all available semesters
    private void populateSemesters() {
        cmbSemester.removeAllItems();
        
        Department department = business.getDepartment();
        if (department == null) {
            JOptionPane.showMessageDialog(this, "Department not found!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Get all semester keys from the master course catalog
        ArrayList<String> semesters = new ArrayList<>(department.mastercoursecatalog.keySet());
        if (semesters.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No semesters found!", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        // Add each semester to the dropdown
        for (String semester : semesters) {
            cmbSemester.addItem(semester);
        }
    }
    
    /**
     * Populate enrollment status dropdown with available options
     * Options: "Open" or "Closed"
     */
    private void populateEnrollmentStatus() {
        cmbEnrollmentStatus.removeAllItems();
        cmbEnrollmentStatus.addItem("Open");
        cmbEnrollmentStatus.addItem("Closed");
    }
    
    /**
     * Load course list for selected semester
     */
    private void loadCourseList() {
        String selectedSemester = (String) cmbSemester.getSelectedItem();
        if (selectedSemester == null) {
            clearTable();
            return;
        }
        
        Department department = business.getDepartment();
        CourseSchedule schedule = department.getCourseSchedule(selectedSemester);
        
        if (schedule == null) {
            clearTable();
            JOptionPane.showMessageDialog(this, 
                "No courses found for this semester!",
                "Info",
                JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        // Get courses taught by this faculty
        ArrayList<CourseOffer> facultyCourses = new ArrayList<>();
        for (CourseOffer co : schedule.getCourseOffers()) {
            FacultyProfile fp = co.getFacultyProfile();
            if (fp != null && fp.equals(faculty)) {
                facultyCourses.add(co);
            }
        }
        
        // Populate table
        populateTable(facultyCourses);
    }
    
    /**
     * Populate table with course data
     */
    private void populateTable(ArrayList<CourseOffer> courses) {
        DefaultTableModel model = (DefaultTableModel) tblCourseList.getModel();
        model.setRowCount(0); // Clear table
        
        for (CourseOffer co : courses) {
            Course course = co.getSubjectCourse();
            
            Object[] row = {
                course.getCOurseNumber(),
                course.getCourseName(),
                course.getCredits(),
                co.getTotalRegistedStudent() + "/" + co.getTotalSeats()
            };
            
            model.addRow(row);
        }
    }
    
    /**
     * Clear table
     */
    private void clearTable() {
        DefaultTableModel model = (DefaultTableModel) tblCourseList.getModel();
        model.setRowCount(0);
    }
    
    

    /**
     * Load details of selected course (called when View Details button is clicked)
     */
    private void viewSelectedCourseDetails() {
        int selectedRow = tblCourseList.getSelectedRow();
        
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, 
                "Please select a course from the table first!",
                "No Selection",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Get course number from selected row
        String courseNumber = tblCourseList.getValueAt(selectedRow, 0).toString();
        
        // Find corresponding CourseOffer
        String selectedSemester = (String) cmbSemester.getSelectedItem();
        Department department = business.getDepartment();
        CourseSchedule schedule = department.getCourseSchedule(selectedSemester);
        
        selectedCourseOffer = schedule.getCourseOfferByNumber(courseNumber);
        
        if (selectedCourseOffer != null) {
            displayCourseDetails(selectedCourseOffer);
            
        } else {
            JOptionPane.showMessageDialog(this, 
                "Error: Could not load course details!",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Display course details in form fields
     */
    private void displayCourseDetails(CourseOffer co) {
        Course course = co.getSubjectCourse();
        String currentSemester = (String) cmbSemester.getSelectedItem();
        
        // Basic info (read-only)
        txtCourseNumber.setText(course.getCOurseNumber());
        txtCourseName.setText(course.getCourseName());
        
        // Editable fields
        txtCourseDescription.setText(course.getDescription() != null ? course.getDescription() : "");
        txtCourseSchedule.setText(co.getSchedule() != null ? co.getSchedule() : "");
        txtSyllabus.setText(course.getSyllabus() != null ? course.getSyllabus() : "");
        
        // Capacity info
        txtCurrentCapacity.setText(String.valueOf(co.getTotalSeats()));
        spinnerCapacity.setValue(co.getTotalSeats());
        txtEnrolled.setText(String.valueOf(co.getTotalRegistedStudent()));
        txtAvailable.setText(String.valueOf(co.getTotalEmptySeat()));
        
        // Display enrollment status
        cmbEnrollmentStatus.setSelectedItem(co.isEnrollmentOpen() ? "Open" : "Closed");
        
        // Enable/disable enrollment status modification based on semester
        boolean canModify = isSemesterModifiable(currentSemester);
        cmbEnrollmentStatus.setEnabled(canModify);
    
    }
    
    /**
     * Clear all detail fields
     */
    private void clearDetails() {
        txtCourseNumber.setText("");
        txtCourseName.setText("");
        txtCourseDescription.setText("");
        txtCourseSchedule.setText("");
        txtSyllabus.setText("");
        txtCurrentCapacity.setText("");
        spinnerCapacity.setValue(25);
        txtEnrolled.setText("");
        txtAvailable.setText("");
        cmbEnrollmentStatus.setSelectedIndex(0);
        
    }
    
    /**
     * Update course details
     */
    private void updateCourse() {
        if (selectedCourseOffer == null) {
            JOptionPane.showMessageDialog(this, 
                "Please select a course first!",
                "No Course Selected",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String currentSemester = (String) cmbSemester.getSelectedItem();
        
        // Get new values from form
        String newDescription = txtCourseDescription.getText();
        String newSchedule = txtCourseSchedule.getText();
        String newSyllabus = txtSyllabus.getText();
        int newCapacity = (Integer) spinnerCapacity.getValue();
        String enrollmentStatus = (String) cmbEnrollmentStatus.getSelectedItem();
        
        // Validate input
        if (newDescription.isEmpty() || newSchedule.isEmpty() || newSyllabus.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "All fields cannot be empty!",
                "Validation Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            Course course = selectedCourseOffer.getSubjectCourse();
            
            // Validate capacity
            int currentEnrolled = selectedCourseOffer.getTotalRegistedStudent();
            if (newCapacity < currentEnrolled) {
                JOptionPane.showMessageDialog(this, 
                    "New capacity (" + newCapacity + ") cannot be less than\n" +
                    "currently enrolled students (" + currentEnrolled + ")!",
                    "Invalid Capacity",
                    JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Only can change future semesters' enrollment status
            if (isSemesterModifiable(currentSemester)) {
                selectedCourseOffer.setEnrollmentOpen(enrollmentStatus.equals("Open"));
            } else {
                boolean currentStatus = selectedCourseOffer.isEnrollmentOpen();
                boolean wantsToChange = (enrollmentStatus.equals("Open") != currentStatus);
            
                if (wantsToChange) {
                    JOptionPane.showMessageDialog(this, 
                        "Cannot modify enrollment status for this semester!\n" +
                        "Reason: This semester has already started.",
                        "Cannot Modify Enrollment",
                        JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
            
            // Update course details
            course.setDescription(newDescription);
            selectedCourseOffer.setSchedule(newSchedule);
            course.setSyllabus(newSyllabus);
            
            // Update capacity if changed
            int currentCapacity = selectedCourseOffer.getTotalSeats();
            if (newCapacity != currentCapacity) {
                boolean success = selectedCourseOffer.updateCapacity(newCapacity);
                if (!success) {
                    JOptionPane.showMessageDialog(this, 
                        "Failed to update capacity! This may be due to occupied seats.",
                        "Update Failed",
                        JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            
                        
            JOptionPane.showMessageDialog(this, 
                "Course details updated successfully!",
                "Success",
                JOptionPane.INFORMATION_MESSAGE);
            
            // Refresh the list
            loadCourseList();
            
            // Reload details to show updated info
            displayCourseDetails(selectedCourseOffer);
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "Error updating course!",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Fall2023 already started, close course enrollment, cannot change status
     * Spring2024 not start yet, open course enrollment, allowed to change status
     */
    private boolean isSemesterModifiable(String semester) {
        // Simple set: Fall2023 already started, cannot change status
        if (semester.equals("Fall2023")) {
            return false;
        }

        return true;
    }
    
    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        loadCourseList();
        clearDetails();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnViewDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDetailsActionPerformed
        // TODO add your handling code here:
        viewSelectedCourseDetails();
    }//GEN-LAST:event_btnViewDetailsActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        updateCourse();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        clearDetails();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).previous(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void cmbSemesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSemesterActionPerformed
        // TODO add your handling code here:
        loadCourseList();
        clearDetails();
    }//GEN-LAST:event_cmbSemesterActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnViewDetails;
    private javax.swing.JComboBox<String> cmbEnrollmentStatus;
    private javax.swing.JComboBox<String> cmbSemester;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner spinnerCapacity;
    private javax.swing.JTable tblCourseList;
    private javax.swing.JTextField txtAvailable;
    private javax.swing.JTextField txtCourseDescription;
    private javax.swing.JTextField txtCourseName;
    private javax.swing.JTextField txtCourseNumber;
    private javax.swing.JTextField txtCourseSchedule;
    private javax.swing.JTextField txtCurrentCapacity;
    private javax.swing.JTextField txtEnrolled;
    private javax.swing.JTextField txtSyllabus;
    // End of variables declaration//GEN-END:variables
}
