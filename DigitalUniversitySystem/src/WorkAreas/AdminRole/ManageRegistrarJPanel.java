/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package WorkAreas.AdminRole;

import Business.Business;
import Business.UserAccounts.UserAccount;
import Business.Directory.UserAccountDirectory;
import Business.Person.Person;
import java.util.ArrayList;
import javax.swing.JOptionPane;


import javax.swing.JPanel;
import Business.Utils.SwingStyleUtil;
import java.awt.Color;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ing-Ruei
 */
    public class ManageRegistrarJPanel extends javax.swing.JPanel {

    JPanel CardSequencePanel;
    Business business;
    UserAccount selecteduseraccount;
    
    public ManageRegistrarJPanel(Business bz, JPanel jp) {
        CardSequencePanel = jp;
        business = bz;
        initComponents();
        refreshTable();
    }

    public void refreshTable() {
        refreshTable(business.getDepartment().getUserAccountDirectory().findRegistrarAccount());
    }

    public void refreshTable(ArrayList<UserAccount> userAccounts) {

        int rc = UserAccountTable.getRowCount();
        int i;
        for (i = rc - 1; i >= 0; i--) {
            ((DefaultTableModel) UserAccountTable.getModel()).removeRow(i);
        }
        
        for (UserAccount ua : userAccounts) {
            Object[] row = new Object[6];
            row[0] = ua;
            row[1] = business.getDepartment().getName();
            row[2] = ua.getAssociatedPersonProfile().getPerson().getName();
            row[3] = ua.getRole();
            row[4] = ua.getAssociatedPersonProfile().getEmail();
            row[5] = ua.getAssociatedPersonProfile().getContact();
            ((DefaultTableModel) UserAccountTable.getModel()).addRow(row);
        }
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        UserAccountTable = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        txtSearchQuery = new javax.swing.JTextField();
        cmbSearchType = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();

        SwingStyleUtil.styleButton(btnBack, new Color(70, 130, 180), Color.WHITE); // SteelBlue
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        SwingStyleUtil.styleButton(btnUpdate, new Color(70, 130, 180), Color.WHITE); // SteelBlue
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        SwingStyleUtil.styleLabel(jLabel1);
        jLabel1.setText("Registrar Profile");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel2.setText("Manage Registrar");
        SwingStyleUtil.centerLabel(jLabel2);

        UserAccountTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Department", "Name", "Role", "Email", "Contact"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        UserAccountTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                UserAccountTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(UserAccountTable);
        SwingStyleUtil.styleTable(UserAccountTable); // Apply table styling

        btnDelete.setText("Delete");
        SwingStyleUtil.styleButton(btnDelete, new Color(220, 20, 60), Color.WHITE); // Crimson
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        cmbSearchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "Name", "Department" }));

        btnSearch.setText("Search");
        SwingStyleUtil.styleButton(btnSearch, new Color(70, 130, 180), Color.WHITE); // SteelBlue
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(502, 502, 502)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(107, 107, 107)
                                .addComponent(cmbSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtSearchQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtSearchQuery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(1, 1, 1)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDelete)
                    .addComponent(btnUpdate))
                .addGap(27, 27, 27)
                .addComponent(btnBack)
                .addContainerGap(78, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        if(selecteduseraccount == null) return;
        UpdateRegistrarAccount usa = new UpdateRegistrarAccount(selecteduseraccount, CardSequencePanel);
        CardSequencePanel.add(usa);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void UserAccountTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UserAccountTableMousePressed
        // Extracts the row (uaser account) in the table that is selected by the user
        int size = UserAccountTable.getRowCount();
        int selectedrow = UserAccountTable.getSelectionModel().getLeadSelectionIndex();

        if (selectedrow < 0 || selectedrow > size - 1) {
            JOptionPane.showMessageDialog(null,"Please select a row from the table first","Warning", JOptionPane.WARNING_MESSAGE );
            return;
        }
        selecteduseraccount = (UserAccount) UserAccountTable.getValueAt(selectedrow, 0);
        if (selecteduseraccount == null) {
            return;
        }
    }//GEN-LAST:event_UserAccountTableMousePressed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int size = UserAccountTable.getRowCount();
        int selectedrow = UserAccountTable.getSelectionModel().getLeadSelectionIndex();
        
        if (selectedrow < 0 || selectedrow > size - 1) {
            JOptionPane.showMessageDialog(null,"Please select a row from the table first","Warning", JOptionPane.WARNING_MESSAGE );
            return;
        }
        int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the selected Account?", "Warning", JOptionPane.WARNING_MESSAGE);
        if(dialogResult == JOptionPane.YES_NO_OPTION){
            business.getDepartment().getUserAccountDirectory().removeAccount(selecteduseraccount);
            refreshTable();
        }          
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        try {
            String searchQuery = txtSearchQuery.getText();
            String searchType = (String) cmbSearchType.getSelectedItem();

            if (searchQuery.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please enter a search query!", "Warning", JOptionPane.WARNING_MESSAGE);
                refreshTable(); // Show all students if search query is empty
                return;
            }

            ArrayList<UserAccount> searchResults = new ArrayList<>();
            UserAccountDirectory uad = business.getDepartment().getUserAccountDirectory();

            switch (searchType) {
                case "ID":
                    // Search by ID in PersonDirectory, then find corresponding UserAccount
                    ArrayList<Person> personsByID = business.getDepartment().getPersonDirectory().searchByID(searchQuery);
                    for (Person p : personsByID) {
                        UserAccount ua = uad.findUserAccount(p.getPersonId());
                        if (ua != null && ua.getRole().equals("Registrar")) {
                            searchResults.add(ua);
                        }
                    }
                    break;
                case "Name":
                    // Search by Name in PersonDirectory, then find corresponding UserAccount
                    ArrayList<Person> personsByName = business.getDepartment().getPersonDirectory().searchByName(searchQuery);
                    for (Person p : personsByName) {
                        UserAccount ua = uad.findUserAccount(p.getPersonId());
                        if (ua != null && ua.getRole().equals("Registrar")) {
                            searchResults.add(ua);
                        }
                    }
                    break;
                case "Department":
                    // For simplicity, search for students within the current department whose department name matches
                    // This assumes the department name is stored somewhere accessible or can be derived.
                    // Since UserAccountTable already filters for students, we just need to filter by department name.
                    // The current department's name is business.getDepartment().getName()
                    if (business.getDepartment().getName().equalsIgnoreCase(searchQuery)) {
                        for (UserAccount ua : uad.findStudentAccount()) {
                            searchResults.add(ua);
                        }
                    }
                    break;
            }

            if (searchResults.isEmpty()) {
                JOptionPane.showMessageDialog(null, "No students found matching your criteria.", "Information", JOptionPane.INFORMATION_MESSAGE);
            }
            refreshTable(searchResults);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error during search: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace(); // Print stack trace to console for detailed debugging
        }
    }//GEN-LAST:event_btnSearchActionPerformed


    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable UserAccountTable;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbSearchType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtSearchQuery;
    // End of variables declaration//GEN-END:variables
}
